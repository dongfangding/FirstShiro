<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!--  首先要配置shiroFilter这个bean。这个默认和web.xml中shiro启动时的filter-name必须一致 -->
	<!--    1. loginUrl 即每个请求被拦截到都要被重定向到哪个界面， -->
	<!--    2. successUrl 登陆成功后跳转到哪个界面 -->
	<!--    3. unauthorizedUrl 未被授权重定向到哪个界面 -->
	<!--    4. 配置securityManager -->
	<!-- 
		public class ShiroFilterFactoryBean implements FactoryBean, BeanPostProcessor {
			private SecurityManager securityManager;
	   	 	private Map<String, Filter> filters;
	   		private Map<String, String> filterChainDefinitionMap; //urlPathExpression_to_comma-delimited-filter-chain-definition
	   		private String loginUrl;
		    private String successUrl;
		    private String unauthorizedUrl;
   		}
	 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
      <!--   <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property> -->
      
      <!--  
        	配置哪些页面需要受保护. 以及访问这些页面需要的权限. 经过测试，这个只对前端的请求有作用，后台直接转发的资源不受限制
        	1). anon 可以被匿名访问
        	2). authc 必须认证(即登录)后才可能访问的页面. 
        	3). logout 登出.
        	4). roles 角色过滤器
        -->
        <!--  
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiro/login = anon
                /shiro/logout = logout
                
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]
                
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
        -->
    </bean>
    
    
    <!-- 配置SecurityManager，这个是shiro的核组件 -->
    <!-- 	1. 可以配置缓存 2. 配置认证策略  3 配置Realm 4. 配置rememberMe的时间 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!-- 配置Realm，来认证用户信息,可以使用realm来配置一个，也可以使用realms来配置一个list.如果配置多个，就牵扯到认证策略的问题 -->
    	<!-- <property name="realm" ref="myRealm"/> -->
    	<!-- 
    		org.apache.shiro.web.mgt.DefaultWebSecurityManager.DefaultWebSecurityManager(Collection<Realm>)
    		public DefaultWebSecurityManager(Collection<Realm> realms) {
		        this();
		        setRealms(realms);
		    }
		    org.apache.shiro.mgt.RealmSecurityManager.setRealms(Collection<Realm>)
		    public void setRealms(Collection<Realm> realms) {
		        if (realms == null) {
		            throw new IllegalArgumentException("Realms collection argument cannot be null.");
		        }
		        if (realms.isEmpty()) {
		            throw new IllegalArgumentException("Realms collection argument cannot be empty.");
		        }
		        this.realms = realms;
		        afterRealmsSet();
		    }
    	 -->
    	<property name="realms">
    		<list>
    			<ref bean="userRealm" />
    		</list>
    	</property>
    	
    	<!-- 配置认证策略，认证策略使用在多个Realm的情况下如何算认证通过，是全部都认证通过，还是只要有一个就可以等 -->
    	<!-- 
    		org.apache.shiro.mgt.AuthenticatingSecurityManager
    	 -->
    	 <property name="authenticator" ref="authenticator" />
    	
    	<!-- 配置rememberMe的时间 -->
    	<property name="rememberMeManager.cookie.maxAge" value="10"></property>
    </bean>
    
    
    <!-- 定义一个Realm，继承AuthenticatingRealm，返回认证信息 -->
	<bean id="userRealm" class="com.ddf.training.shiro.UserRealm">
	
	</bean>
	
	<!-- 定义认证策略，认证策略使用在多个Realm的情况下如何算认证通过，是全部都认证通过，还是只要有一个就可以等 -->
	<bean id="authenticator" 
    	class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
    	<property name="authenticationStrategy">
    		<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
    	</property>
    </bean>
</beans>
